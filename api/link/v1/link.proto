syntax = "proto3";

package link.v1;

import "google/api/annotations.proto";

option go_package = "Link-Kratos/api/link/v1;v1";


service Link {
  //拦截流量信息，并返回
  rpc Interceptor (InterceptorRequest) returns (InterceptorReply) {
    option (google.api.http) = {
      get: "/api/users/interceptor",
    };
  }
  //统计流量信息，并返回
  rpc Statistics (StatisticsRequest) returns (StatisticsReply) {
    option (google.api.http) = {
      get: "/api/users/statistics",
    };
  }
  //获取实时流量信息，并返回
  rpc RealTimeTraffic (RealTimeTrafficRequest) returns (RealTimeTrafficReply) {
    option (google.api.http) = {
      get: "/api/users/realtimetraffic",
    };
  }
}

message RealTimeTrafficRequest {
  message RealTimeTraffic {
    string client_name = 1;//客户端名称
  }
  RealTimeTraffic realtime_traffic = 1;
}

message RealTimeTrafficReply {
  message RealTimeTraffic {
    string upflow = 1;  //实时上行流量大小
    string downflow = 2;//实时下行流量大小
  }
  RealTimeTraffic realtime_traffic = 1;
}

message StatisticsRequest {
  message Statistics {
    string client_name = 1;//客户端名称
  }
  Statistics statistics = 1;
}

message StatisticsReply {
  message Statistics {
    string upflow = 1;  //上行流量大小
    string downflow = 2;//下行流量大小
  }
  Statistics statistics = 1;
}


message InterceptorRequest {
  message Interceptor {
    string user_agent = 1;//请求头
    string method = 2;//请求方法
    string host = 3;//请求的主机名
    string date = 4;//请求时间
  }
}

message InterceptorReply {
  message Interceptor {
    string date = 1;        // 请求开始时间
    string client_name = 2; // 客户端名称
    string status = 3;      // 状态
    int64 upload_size = 5;  // 上传大小
    int64 download_size = 6;// 下载大小
    int64 duration_ms = 7;  // 持续时间
    string method = 8;      // 请求方法
  }
  Interceptor interceptor = 1;
}


